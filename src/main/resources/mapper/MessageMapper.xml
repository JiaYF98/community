<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.community.mapper.MessageMapper">
    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <select id="selectConversations" resultType="Message">
        select
        <include refid="selectFields"/>
        from message
        where id in (
        select max(id) from message
        where (to_id = #{userId} or to_id = #{userId})
        and status != 2
        and from_id != 1
        group by conversation_id
        )
        order by create_time desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectConversationCount">
        select count(m.max_id) from (
        select max(id) as max_id from message
        where (from_id = #{userId} or to_id = #{userId})
        and status != 2
        and from_id != 1
        group by conversation_id
        ) as m
    </select>

    <select id="selectLetters" resultType="Message">
        select
        <include refid="selectFields"/>
        from message
        where conversation_id = #{conversationId}
        and status != 2
        order by create_time desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectLetterCount">
        select count(id)
        from message
        where conversation_id = #{conversationId}
        and status != 2
    </select>

    <select id="selectLetterUnreadCount">
        select count(id)
        from message
        where to_id = #{userId}
        and status = 0
        and from_id != 1
        <if test="conversationId != null">
            and conversation_id = #{conversationId}
        </if>
    </select>

    <insert id="insertMessage" parameterType="Message">
        insert into
        message(<include refid="insertFields"/>)
        values(#{fromId}, #{toId}, #{conversationId}, #{content}, #{status}, #{createTime})
    </insert>

    <update id="updateMessageStatus">
        update message
        set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="selectLatestNotice" resultType="Message">
        select
        <include refid="selectFields"/>
        from message
        where to_id = #{userId}
        and conversation_id = #{topic}
        and from_id = 1
        and status != 2
        order by create_time desc
        limit 1
    </select>

    <select id="selectNoticeCount">
        select count(id)
        from message
        where to_id = #{userId}
        and conversation_id = #{topic}
        and status != 2
        and from_id = 1
        group by conversation_id
    </select>

    <select id="selectNoticeUnreadCount">
        select count(id) from message
        where to_id = #{userId}
        and status = 0
        and from_id = 1
        <if test="topic!=null">
            and conversation_id = #{topic}
        </if>
    </select>

    <select id="selectNotices" resultType="Message">
        select <include refid="selectFields"/>
        from message
        where to_id = #{userId}
        and conversation_id = #{topic}
        and status != 2
        and from_id = 1
        order by create_time desc
        limit #{offset}, #{limit}
    </select>
</mapper>
